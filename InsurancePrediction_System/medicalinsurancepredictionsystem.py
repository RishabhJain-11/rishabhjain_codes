# -*- coding: utf-8 -*-
"""MedicalInsurancePredictionSystem.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MxeTyJKK1wVWClFpyzvBoYpFoTBOU215
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics

d = pd.read_csv('insurance.csv')
d.head()

d.shape

d.info()

d.isnull().sum()

d.describe()

sns.set()
plt.figure(figsize = (6,6))
sns.distplot(d['age'])
plt.title('Age Distribution')
plt.show()

plt.figure(figsize = (6,6))
sns.countplot(x = 'sex', data = d)
plt.title('Sex Distribution')
plt.show()

d['sex'].value_counts()

plt.figure(figsize = (6,6))
sns.distplot(d['bmi'])
plt.title('BMI Distribution')
plt.show()

plt.figure(figsize = (6, 6))
sns.countplot(x = 'children', data = d)
plt.title('Children')
plt.show()

d['children'].value_counts()

plt.figure(figsize = (6, 6))
sns.countplot(x = 'smoker', data = d)
plt.title('Smoker')
plt.show()

d['smoker'].value_counts()

plt.figure(figsize = (6, 6))
sns.countplot(x = 'region', data = d)
plt.title('region')
plt.show()

d['region'].value_counts()

plt.figure(figsize = (6, 6))
sns.distplot(d['charges'])
plt.title('Charges Distribution')
plt.show()

d.replace({'sex' : {'male' : 0, 'female' : 1}}, inplace = True)
d.replace({'smoker': {'yes' : 0, 'no' : 1}}, inplace = True)
d.replace({'region': {'southeast': 0, 'southwest': 1, 'northeast': 2, 'northwest': 3}}, inplace = True)

X = d.drop(columns = 'charges', axis = 1)
y = d['charges']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 2)

regressor = LinearRegression()

regressor.fit(X_train, y_train)
training_data_prediction = regressor.predict(X_train)
r2_train = metrics.r2_score(y_train, training_data_prediction)
print('R Squared Value: ', r2_train)

test_data_prediction = regressor.predict(X_test)
r2_test = metrics.r2_score(y_test, test_data_prediction)
print('R Squared Value: ', r2_test)

input_data = (31,1,25.74,0,1,0)

# changing input_data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the array
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = regressor.predict(input_data_reshaped)
print(prediction)

print('The insurance cost is USD ', prediction[0])

