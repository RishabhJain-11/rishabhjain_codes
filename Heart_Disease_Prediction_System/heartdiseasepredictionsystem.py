# -*- coding: utf-8 -*-
"""HeartDiseasePredictionSystem.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-Up_iTSKY4Mk-rQkLlvr8FUg86gjK07W
"""

# prompt: import all the basic libraries

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn
from sklearn.linear_model import LogisticRegression

# prompt: import and print 5 columns of dataset

df = pd.read_csv('heart_disease_data.csv')  # Replace 'dataset.csv' with the actual file name
print(df.head())

# prompt: convert that to a Dataframe

data = pd.DataFrame(df)
data.head()

# prompt: now describe the data

print(data.describe())

# prompt: print the shape

print(data.shape)

# prompt: show the correlation between features using heatmap

plt.figure(figsize=(10,8))
sns.heatmap(data.corr(), annot=True, fmt='.2f')
plt.title('Correlation Matrix')
plt.show()

# prompt: print the info of the dataset

print(data.info())

# prompt: print the null values in the data

print(data.isnull().sum())

# prompt: checking the distribution of target variable

plt.figure(figsize=(6,4))
sns.countplot(x='target', data=data)
plt.title('Distribution of Target Variable')
plt.show()

"""1 - Healthy Heart
0 - Defective Heart
"""

# prompt: seperate the target and all the features

# Separate the target variable from the features
X = data.drop('target', axis=1)
y = data['target']

# prompt: print the shape of x and y

print(X.shape)
print(y.shape)

# prompt: split the data into train and test data

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,stratify = y, random_state=2)

print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

# prompt: model training using Logistic Regression

# Initialize the LogisticRegression model
model = LogisticRegression()

# Fit the model to the training data
model.fit(X_train, y_train)

# prompt: model evaluation using accuracy score

from sklearn.metrics import accuracy_score

# Make predictions on the test data
y_pred = model.predict(X_test)

# Calculate the accuracy score
accuracy = accuracy_score(y_test, y_pred)

# Print the accuracy score
print('Accuracy:', accuracy)

# prompt: do the accuracy score on training data

# Calculate the accuracy score on training data
y_train_pred = model.predict(X_train)
accuracy_train = accuracy_score(y_train, y_train_pred)

# Print the accuracy score on training data
print('Training Accuracy:', accuracy_train)

input_data = (45,1,3,110,264,0,1,132,0,1.2,1,0,3)
inp_data = np.asarray(input_data)
inp_data_reshaped = inp_data.reshape(1,-1)
prediction = model.predict(inp_data_reshaped)
print(prediction)







