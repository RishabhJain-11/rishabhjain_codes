# -*- coding: utf-8 -*-
"""BigMartSalesPredictionSystem.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y3YIjYcae2AwMPp6T7luOfI05Y9RL4fw
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics

d = pd.read_csv('Train (1).csv')
d.head(

)

d.shape

d.info()

d.isnull().sum()

d['Item_Weight'].mean()
d['Item_Weight'].fillna(d['Item_Weight'].mean(), inplace = True)
d['Outlet_Size'].mode()

mode_of_outlet_size = d.pivot_table(values = 'Outlet_Size', columns='Outlet_Type', aggfunc = (lambda x: x.mode()[0]))
print(mode_of_outlet_size)

miss_values = d['Outlet_Size'].isnull()

print(miss_values)

d.loc[miss_values, 'Outlet_Size'] = d.loc[miss_values, 'Outlet_Type'].apply(lambda x : mode_of_outlet_size[x])

d.isnull().sum()

d.describe()

sns.set()

plt.figure(figsize=(6,6))
sns.distplot(d['Item_Weight'])
plt.show()

plt.figure(figsize=(6,6))
sns.distplot(d['Item_Visibility'])
plt.show()

plt.figure(figsize=(6,6))
sns.distplot(d['Item_MRP'])
plt.show()

plt.figure(figsize=(6,6))
sns.distplot(d['Item_Outlet_Sales'])
plt.show()

plt.figure(figsize=(6,6))
sns.countplot(x='Outlet_Establishment_Year', data=d)
plt.show()

plt.figure(figsize = (6, 6))
sns.countplot(x = 'Item_Fat_Content', data = d)
plt.show()

plt.figure(figsize = (30, 6))
sns.countplot(x = 'Item_Type', data = d)
plt.show()

d['Item_Fat_Content'].value_counts()

d.replace({'Item_Fat_Content': {'low fat':'Low Fat','LF':'Low Fat', 'reg':'Regular'}}, inplace=True)

d['Item_Fat_Content'].value_counts()

encoder = LabelEncoder()

d['Item_Identifier'] = encoder.fit_transform(d['Item_Identifier'])
d['Item_Fat_Content'] = encoder.fit_transform(d['Item_Fat_Content'])
d['Item_Type'] = encoder.fit_transform(d['Item_Type'])
d['Outlet_Identifier'] = encoder.fit_transform(d['Outlet_Identifier'])
d['Outlet_Size'] = encoder.fit_transform(d['Outlet_Size'])
d['Outlet_Location_Type'] = encoder.fit_transform(d['Outlet_Location_Type'])
d['Outlet_Type'] = encoder.fit_transform(d['Outlet_Type'])

d.head()

X = d.drop(columns = 'Item_Outlet_Sales', axis = 1)
y = d['Item_Outlet_Sales']

print(X)

# prompt: train test split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print(f"Shape of X_train: {X_train.shape}")
print(f"Shape of X_test: {X_test.shape}")
print(f"Shape of y_train: {y_train.shape}")
print(f"Shape of y_test: {y_test.shape}")

regressor = XGBRegressor()
regressor.fit(X_train, y_train)
training_data_prediction = regressor.predict(X_train)
r2_train = metrics.r2_score(y_train, training_data_prediction)
print('R Squared value = ', r2_train)

test_data_prediction = regressor.predict(X_test)
r2_test = metrics.r2_score(y_test, test_data_prediction)
print('R Squared value = ', r2_test)

