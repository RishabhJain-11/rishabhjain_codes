# -*- coding: utf-8 -*-
"""Linear_Regression_From_Scratch.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SYheIfx-Bh9OsmmyguTcHacrOn0mpWhI
"""

import numpy as np

class Linear_Regression():
  def __init__(self, learning_rate, no_of_iterations):
    self.learning_rate = learning_rate
    self.no_of_iterations = no_of_iterations

  def fit(self, X, Y):
    self.m, self.n = X.shape
    self.w = np.zeros(self.n)
    self.b = 0
    self.X = X
    self.Y = Y

    for i in range(self.no_of_iterations):
      self.update_weights()

  def update_weights(self):
    Y_prediction = self.predict(self.X)
    dw = - (2 * (self.X.T).dot(self.Y - Y_prediction)) / self.m

    db = - 2 * np.sum(self.Y - Y_prediction)/self.m

    self.w = self.w - self.learning_rate * dw
    self.b = self.b - self.learning_rate * db

  def predict(self, X):
    return X.dot(self.w) + self.b

import pandas as pd
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt

data = pd.read_csv("/content/salary_data (1).csv")
data.head()

print(data.shape, data.describe, data.isnull().sum())

# prompt: split the features and target

X = data.iloc[:, :-1].values
Y = data.iloc[:, 1].values

# prompt: train test split

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.33, random_state = 2)

model = Linear_Regression(learning_rate = 0.01, no_of_iterations=1000)

model.fit(X_train, Y_train)

print("weight = ", model.w[0])
print("bias = ", model.b)

test_data_prediction = model.predict(X_test)

print(test_data_prediction)

plt.scatter(X_test, Y_test, color='red')
plt.plot(X_test, test_data_prediction, color='blue')
plt.xlabel("Work Experience")
plt.ylabel("Salary")
plt.title("Salary v/s Experience")
plt.show()

